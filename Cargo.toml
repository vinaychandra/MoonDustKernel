[package]
name = "moondust-kernel"
version = "0.0.1"
authors = ["Vinay Chandra Dommeti <moondust@vinay.vc>"]
edition = "2018"

[dependencies]
spin = "0.5"
futures-util = { version = "0.3", default-features = false, features = ["alloc"] }
log = { version = "0.4", features = ["max_level_debug", "release_max_level_warn"] }
lazy_static = { version = "1", features = ["spin_no_std"] }
volatile = "0.2"
linked_list_allocator = "0.8"

[target.'cfg(target_arch = "x86_64")'.dependencies]
bootloader = {path = "./others/x86_64/bootloader", features = ["map_physical_memory"]}
x86_64 = "0.11"

[package.metadata.bootimage]
test-args = [
    "-device", "isa-debug-exit,iobase=0xf4,iosize=0x04", "-serial", "stdio",
    "-display", "none"
]
test-success-exit-code = 33         # (0x10 << 1) | 1

[package.metadata.bootloader]
# The address at which the kernel stack is placed. If not provided, the bootloader
# dynamically searches for a location.
kernel-stack-address = "0xFFFFD00000000000"

# The size of the kernel stack, given in number of 4KiB pages. Defaults to 512.
kernel-stack-size = 1024

# The virtual address offset from which physical memory is mapped, as described in
# https://os.phil-opp.com/paging-implementation/#map-the-complete-physical-memory
# Only applies if the `map_physical_memory` feature of the crate is enabled.
# If not provided, the bootloader dynamically searches for a location.
physical-memory-offset = "0xFFFF800000000000"

# The address at which the bootinfo struct will be placed. if not provided,
# the bootloader will dynamically search for a location.
boot-info-address = "0xFFFFD10000000000"